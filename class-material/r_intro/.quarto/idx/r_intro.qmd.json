{"title":"R Language Basics","markdown":{"yaml":{"format":{"live-revealjs":{"theme":["simple","slides.scss"],"footer":"<http://thegrantlab.org/teaching/>"}},"title":"R Language Basics","subtitle":"(Part 1)","author":"Barry Grant","institute":"UC San Diego","logo":"images/logo.png","webr":{"cell-options":{"fig-width":11,"fig-height":6,"max-lines":5,"autorun":false}}},"headingText":"Background","containsRefs":false,"markdown":"\n\n\n\n\n\nR is a powerful data programming language that you can use to explore and understand data in an open-ended, highly interactive, iterative way.  \n<br/>\nLearning R will give you the freedom to experiment and problem solve during data analysis — exactly what we need as bioinformaticians.\n\n\n## Outline \nBefore delving into working with real data in R, we need to learn the basics of the R language. \nIn this section, we'll learn how to do simple calculations in R, assign values to variables, and call functions. \n\n<br/>\nThen, in part 2, we'll look at R's vectors and data.frames, along with the critically important topic of vectorization that underpins how we approach many problems in R.\n\n\n\n## Logistics\nBelow is a interactive \"Exercise\" **code chunk** that you can edit and run by clicking the [> Run Code]{style=\"color:white;background-color:#0F6EFD;padding: 0.5px 4px 0.5px 4px;\"} button. \n\n<br/>\nGive it a try:\n\n\n```{webr}\n#| exercise: ex\n#| autorun: false\n#| caption: Example Exercise\n# Click the Play button to run this code\n5 + 3\n```\n\n## Checking your understanding\n\nWe will use these types of code chunks to ask you to complete some missing code, typically indicated by the blank [______]{style=\"color:black;\"} place holder.  \n</br>\nFor example, complete the code below so your answer sums to 10:\n\n```{webr}\n#| exercise: ex_1\n#| caption: Exercise fill in the blank\n5 + 3 + ______\n```\n\n::: { .hint exercise=\"ex_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n\nYour job here is to replace the `______` blank with your answer, in this case a number, so the final answer sums to 10. Give it a try and be sure to run the code chunk to see if you are correct.\n\n:::\n:::\n\n::: { .solution exercise=\"ex_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution: note no high level math is required for this class ;-)\n\n```r\n5 + 3 + 2                                 #<1>\n```\n1. You can copy/paste this answer to check how things work. However, I strongly suggest you **try things for yourself first**. Past experience indicates that you don't learn much from copy and pasting without trying things for yourself first.\n\n\n:::\n:::\n\n\n```{webr}\n#| exercise: ex_1\n#| check: true\n\n\nif (identical(.result, 5+3+2)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry. Your answer should sum to 10.\")\n}\n```\n\n\n## Where are we going with this... {background=\"#43464B\"}\n\nOK, so R is a big calculator but it is also so much more than that. For example, we will see soon that R can do complicated statistical analysis on big datasets that you would never want to use a calculator for. \n\n<br/>\nWhat's more R allows you to do your analysis in a robust and re-usable way so you can automate things later. \n\n<br/>\nAt the heart of this is saving your answers as you go along (a.k.a. **object assignment**).\n\n\n## Object assignment - saving your answers \n\nLets make an assignment and then inspect the object you just created.\n\n</br>\n\n```{webr}\n#| exercise: ex_2\n#| autorun: false\nx <- 3 * 4  \nx\n```\n\n</br>\n\n> All R statements where you create objects have this form:\n> ```\n> objectName <- value  \n> ```\n> and in my head I hear, e.g., \"x gets 12\".\n\n\n## Key point: {.key-slide}\n\nYou will make lots of assignments and the little arrow operator `<-` is a pain to type. **Don't be lazy and use `=`**, although it would work, because it will just sow confusion later when we learn about functions. \n\n</br>\n\n> In *RStudio* folks will often utilize the keyboard shortcut: `Alt` + `-` (that is pushing the `Alt` and `minus` keys together or the `Option` and `minus` keys if you are on a Mac).\n\n\n## Side note about object names... {.nb-slide}\n\nObject names cannot start with a digit and can not contain certain other \"special\" characters such as a comma or a space. \n\n</br>\nYou will be wise to adopt a [convention for demarcating words](http://en.wikipedia.org/wiki/Snake_case) in names so as to avoid spaces, for example:\n\n</br>\n\n```\ni_use_snake_case  \nother.people.use.periods  \nevenOthersUseCamelCase  \nonly-crazy-folks-use-kabab-case \n```\n\n\n\n## Typing fedility matters\nLet's make another assignment\n\n</br>\n\n```{webr}\nr_rocks <- 2 ^ 3  \n```\n\n</br>\nand then try to inspect this object:\n\n</br>\n\n```{webr}\n#| exercise: ex_3\n#| autorun: false\nrrocks\nR_rocks\n```\n\n\nWhat happened? What about the 2nd line? Did you run both chunks? Can you fix this?\n\n\n## Key point: {.key-slide}\n\nWhen we program we enter into an implicit contract with the computer. The computer will do tedious computation for you. In return, you will be completely precise in your instructions. \n\n</br>\nTypos matter. Case matters. The order that you do things matters. \n\n</br>\n**Therefore get better at typing!**\n\n---\n\n## Functions\n\nBeing productive in R is all about using functions - we call functions when we read a dataset, perform a statistical analysis, make a fancy visualization or do just about anything else. \n\n</br>\nAll functions are accessed like so:\n\n</br>\n\n```\nfunctionName(arg1 = val1, arg2 = val2, and so on)\n```\n</br>\nNotice that we use the `=` sign here for setting function inputs (a.k.a. setting function \"arguments\") and that each one is separated by a comma.  \n\n\n## Calling functions\nLet's try using the `seq()` function, which makes regular sequences of numbers:\n\n</br>\n\n```{webr}\n#| exercise: ex_4\n#| autorun: false\nseq(1,10)  \n```\n\n</br>\nYou can always access the help/documentation of a particular function by using the `help(myFunction)` function, e.g. `help(seq)`. Try it out above.\n\n\n## Key point: {.key-slide}\n\nThe previous `seq(1, 10)` example above also demonstrates something about how R resolves function arguments. \n\n</br>\nYou can always specify in `name = value` form. But if you do not, R attempts to resolve by position (1st argument, 2nd argument, etc.). \n\n</br>\nSo above, it is assumed that we want a sequence `from = 1` that goes `to = 10`. Since we didn't specify step size, the default value of `by` in the function definition is used, which ends up being 1 in this case. \n\n---\n\nWhat does the following command do?\n\n</br>\n\n```{webr}\n#| exercise: ex_5\n#| autorun: false\nseq(1,10, by=2)  \n```\n\n</br>\nRun it and see. Could you of figured out this result from the documentation accessed via the command `help(seq)`? \n\n\n## Side note {background=\"#43464B\"}\nOne very useful part of a functions documentation is the **Examples** section (typically found at the very end of the documentation entry).\n\nYou can copy and paste these into your session or execute them all in one go with the `examples()` function, e.g.\n\n```{webr}\nexample(seq)\n```\n\n\n## Key point: {.key-slide}\n\nR has built in help accessible with the question mark or `help()` function. \n\nHowever, it is rather heavy on nerd-speak and takes some getting used to. \n\n</br> \n\n> Remember Google and ChatGPT are your friends. Asking Google and ChatGPT is often the quickest way to get the help you need before you are full on nerd-speak fluent.  \n\n\n## Vectors\n\nVectors are the most fundamental data structures in R. Their job is to hold a contiguous collection of *\"elements\"* of the same *\"type\"*. \n\n</br>\nFor example a set of numbers (what we call **numeric** type), words (**character** type) or True and False vales (**logical** type).\n\nTo create vectors we combine values with the function `c()`:\n```{webr}\n#| exercise: ex_6\nx <- c(1, 5, 3, 4, 2) \ny <- c(\"G\",\"A\",\"C\",\"A\")\nz <- c(TRUE, FALSE, TRUE, TRUE)\nx + 10\n```\n\n---\n\n\n\n## Vectorization\n\nVectors are the basis of one of R's most important features: **vectorization**. Vectorization allows us to loop over all elements in a vector without the need to write an explicit loop. \n\n</br>\nFor example, R's arithmetic operators (and tones of other functions) are all vectorized:\n\n```{webr}\n#| exercise: ex_7\nx <- c(1, 10, 5)\nx + 10\n```\n\n```{webr}\n#| exercise: ex_8\nlog(x)/2 + 1 \n# note how we can combine vectorized operations\n```\n\n\n## Key point: {.key-slide}\n\nUnlike other languages, R allows us to completely forgo explicitly looping over vectors with a for loop. \n\n</br>\n\n> Later on, we'll see other methods used for more explicit looping. For now I want you to appreciate that the *vectorized approach* is not only more **clear** and **readable** but it’s also computationally **faster**.\n\n\n## Indexing - getting to subsets of your data\n\nAn index is a number (or logical) vector that specifies which element in a vector (or other data structure) to retrieve. \n\n</br>\nWe can use **indexing** to get or set values to certain elements from a vector:\n\n```{webr}\n#| exercise: ex_9\n# Access the 2nd element of x\nx <- c(56, 95.3, 0.4)\nx[2]\n```\n\n---\n\nWe can change specific vector elements by combining indexing and assignment.\n\n</br>\n\n```{webr}\n#| exercise: ex_10\nx <- c(56, 95.3, 0.4)\nx[3] <- 0.5\nx\n```\n\n</br>\n\nOur next session will cover more on **vectors**, and the other major R data structures (**matrices**, **data.frames** and **lists**).\n\n## Data.frames combine vectors into tables\n\nA data.frame is a table (or two-dimensional array-like structure) where columns can contain different types of data (numeric, character, logical, etc.).\n\n</br>\n\nData.frames are ideal for managing and analyzing datasets with rows and columns.\n\n```{webr}\n#| exercise: ex_11\ndf <- data.frame(column1 = c(\"A\", \"B\", \"C\"), column2 = c(10, 200, 3))\ndf\n```\n\n## Indexing a data.frame\n\nWe can use numeric or logical index values for subseting a data.frame, similer to those we used for vectors.\n\n\n```{webr}\n#| exercise: ex_12\ndf <- data.frame(column1 = c(\"A\", \"B\", \"C\"), column2 = c(10, 200, 3))\ndf[1,]\ndf[1,2]\n```\n\nYou can also access specific columns via their column name: \n\n```{webr}\n#| exercise: ex_13\ndf <- data.frame(column1 = c(\"A\", \"B\", \"C\"), column2 = c(10, 200, 3))\ndf$column1\n```\n\n\n## Errors, warnings, and messages\n\nR will show red text in the console pane in three different situations:\n\n- **Errors**: When the red text is a legitimate error, it will be prefaced with \"Error in…\" and will try to explain what went wrong. Generally when there's an error, the code will not run.\n\n- **Warnings**: When the red text is a warning, it will be prefaced with \"Warning:' and R will try to explain why there's a warning. Generally your code will still work, but with some caveats. \n\n- **Messages**: When the red text doesn't start with either \"Error\" or \"Warning\", it's just a friendly message. You'll see these messages when you load R packages for example. \n\n\n\n## Key point: {.key-slide}\n\nR reports errors, warnings, and messages in a glaring red font, which makes it seem like it is scolding you. \n\n</br>\n**Don't panic**, it doesn't necessarily mean anything is wrong and indeed it is not always bad thing but you should read them to make sure. Over time we will learn more \"R speak\" and get more comfortable generally working in the console. Again Google and ChatGPT can help you interpert these messages.\n\n# End of Part 1\n\n## {background-image=\"images/title_slide.png\"}\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n\n\n\n## Background\n\nR is a powerful data programming language that you can use to explore and understand data in an open-ended, highly interactive, iterative way.  \n<br/>\nLearning R will give you the freedom to experiment and problem solve during data analysis — exactly what we need as bioinformaticians.\n\n\n## Outline \nBefore delving into working with real data in R, we need to learn the basics of the R language. \nIn this section, we'll learn how to do simple calculations in R, assign values to variables, and call functions. \n\n<br/>\nThen, in part 2, we'll look at R's vectors and data.frames, along with the critically important topic of vectorization that underpins how we approach many problems in R.\n\n\n\n## Logistics\nBelow is a interactive \"Exercise\" **code chunk** that you can edit and run by clicking the [> Run Code]{style=\"color:white;background-color:#0F6EFD;padding: 0.5px 4px 0.5px 4px;\"} button. \n\n<br/>\nGive it a try:\n\n\n```{webr}\n#| exercise: ex\n#| autorun: false\n#| caption: Example Exercise\n# Click the Play button to run this code\n5 + 3\n```\n\n## Checking your understanding\n\nWe will use these types of code chunks to ask you to complete some missing code, typically indicated by the blank [______]{style=\"color:black;\"} place holder.  \n</br>\nFor example, complete the code below so your answer sums to 10:\n\n```{webr}\n#| exercise: ex_1\n#| caption: Exercise fill in the blank\n5 + 3 + ______\n```\n\n::: { .hint exercise=\"ex_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n\nYour job here is to replace the `______` blank with your answer, in this case a number, so the final answer sums to 10. Give it a try and be sure to run the code chunk to see if you are correct.\n\n:::\n:::\n\n::: { .solution exercise=\"ex_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution: note no high level math is required for this class ;-)\n\n```r\n5 + 3 + 2                                 #<1>\n```\n1. You can copy/paste this answer to check how things work. However, I strongly suggest you **try things for yourself first**. Past experience indicates that you don't learn much from copy and pasting without trying things for yourself first.\n\n\n:::\n:::\n\n\n```{webr}\n#| exercise: ex_1\n#| check: true\n\n\nif (identical(.result, 5+3+2)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"That's incorrect, sorry. Your answer should sum to 10.\")\n}\n```\n\n\n## Where are we going with this... {background=\"#43464B\"}\n\nOK, so R is a big calculator but it is also so much more than that. For example, we will see soon that R can do complicated statistical analysis on big datasets that you would never want to use a calculator for. \n\n<br/>\nWhat's more R allows you to do your analysis in a robust and re-usable way so you can automate things later. \n\n<br/>\nAt the heart of this is saving your answers as you go along (a.k.a. **object assignment**).\n\n\n## Object assignment - saving your answers \n\nLets make an assignment and then inspect the object you just created.\n\n</br>\n\n```{webr}\n#| exercise: ex_2\n#| autorun: false\nx <- 3 * 4  \nx\n```\n\n</br>\n\n> All R statements where you create objects have this form:\n> ```\n> objectName <- value  \n> ```\n> and in my head I hear, e.g., \"x gets 12\".\n\n\n## Key point: {.key-slide}\n\nYou will make lots of assignments and the little arrow operator `<-` is a pain to type. **Don't be lazy and use `=`**, although it would work, because it will just sow confusion later when we learn about functions. \n\n</br>\n\n> In *RStudio* folks will often utilize the keyboard shortcut: `Alt` + `-` (that is pushing the `Alt` and `minus` keys together or the `Option` and `minus` keys if you are on a Mac).\n\n\n## Side note about object names... {.nb-slide}\n\nObject names cannot start with a digit and can not contain certain other \"special\" characters such as a comma or a space. \n\n</br>\nYou will be wise to adopt a [convention for demarcating words](http://en.wikipedia.org/wiki/Snake_case) in names so as to avoid spaces, for example:\n\n</br>\n\n```\ni_use_snake_case  \nother.people.use.periods  \nevenOthersUseCamelCase  \nonly-crazy-folks-use-kabab-case \n```\n\n\n\n## Typing fedility matters\nLet's make another assignment\n\n</br>\n\n```{webr}\nr_rocks <- 2 ^ 3  \n```\n\n</br>\nand then try to inspect this object:\n\n</br>\n\n```{webr}\n#| exercise: ex_3\n#| autorun: false\nrrocks\nR_rocks\n```\n\n\nWhat happened? What about the 2nd line? Did you run both chunks? Can you fix this?\n\n\n## Key point: {.key-slide}\n\nWhen we program we enter into an implicit contract with the computer. The computer will do tedious computation for you. In return, you will be completely precise in your instructions. \n\n</br>\nTypos matter. Case matters. The order that you do things matters. \n\n</br>\n**Therefore get better at typing!**\n\n---\n\n## Functions\n\nBeing productive in R is all about using functions - we call functions when we read a dataset, perform a statistical analysis, make a fancy visualization or do just about anything else. \n\n</br>\nAll functions are accessed like so:\n\n</br>\n\n```\nfunctionName(arg1 = val1, arg2 = val2, and so on)\n```\n</br>\nNotice that we use the `=` sign here for setting function inputs (a.k.a. setting function \"arguments\") and that each one is separated by a comma.  \n\n\n## Calling functions\nLet's try using the `seq()` function, which makes regular sequences of numbers:\n\n</br>\n\n```{webr}\n#| exercise: ex_4\n#| autorun: false\nseq(1,10)  \n```\n\n</br>\nYou can always access the help/documentation of a particular function by using the `help(myFunction)` function, e.g. `help(seq)`. Try it out above.\n\n\n## Key point: {.key-slide}\n\nThe previous `seq(1, 10)` example above also demonstrates something about how R resolves function arguments. \n\n</br>\nYou can always specify in `name = value` form. But if you do not, R attempts to resolve by position (1st argument, 2nd argument, etc.). \n\n</br>\nSo above, it is assumed that we want a sequence `from = 1` that goes `to = 10`. Since we didn't specify step size, the default value of `by` in the function definition is used, which ends up being 1 in this case. \n\n---\n\nWhat does the following command do?\n\n</br>\n\n```{webr}\n#| exercise: ex_5\n#| autorun: false\nseq(1,10, by=2)  \n```\n\n</br>\nRun it and see. Could you of figured out this result from the documentation accessed via the command `help(seq)`? \n\n\n## Side note {background=\"#43464B\"}\nOne very useful part of a functions documentation is the **Examples** section (typically found at the very end of the documentation entry).\n\nYou can copy and paste these into your session or execute them all in one go with the `examples()` function, e.g.\n\n```{webr}\nexample(seq)\n```\n\n\n## Key point: {.key-slide}\n\nR has built in help accessible with the question mark or `help()` function. \n\nHowever, it is rather heavy on nerd-speak and takes some getting used to. \n\n</br> \n\n> Remember Google and ChatGPT are your friends. Asking Google and ChatGPT is often the quickest way to get the help you need before you are full on nerd-speak fluent.  \n\n\n## Vectors\n\nVectors are the most fundamental data structures in R. Their job is to hold a contiguous collection of *\"elements\"* of the same *\"type\"*. \n\n</br>\nFor example a set of numbers (what we call **numeric** type), words (**character** type) or True and False vales (**logical** type).\n\nTo create vectors we combine values with the function `c()`:\n```{webr}\n#| exercise: ex_6\nx <- c(1, 5, 3, 4, 2) \ny <- c(\"G\",\"A\",\"C\",\"A\")\nz <- c(TRUE, FALSE, TRUE, TRUE)\nx + 10\n```\n\n---\n\n\n\n## Vectorization\n\nVectors are the basis of one of R's most important features: **vectorization**. Vectorization allows us to loop over all elements in a vector without the need to write an explicit loop. \n\n</br>\nFor example, R's arithmetic operators (and tones of other functions) are all vectorized:\n\n```{webr}\n#| exercise: ex_7\nx <- c(1, 10, 5)\nx + 10\n```\n\n```{webr}\n#| exercise: ex_8\nlog(x)/2 + 1 \n# note how we can combine vectorized operations\n```\n\n\n## Key point: {.key-slide}\n\nUnlike other languages, R allows us to completely forgo explicitly looping over vectors with a for loop. \n\n</br>\n\n> Later on, we'll see other methods used for more explicit looping. For now I want you to appreciate that the *vectorized approach* is not only more **clear** and **readable** but it’s also computationally **faster**.\n\n\n## Indexing - getting to subsets of your data\n\nAn index is a number (or logical) vector that specifies which element in a vector (or other data structure) to retrieve. \n\n</br>\nWe can use **indexing** to get or set values to certain elements from a vector:\n\n```{webr}\n#| exercise: ex_9\n# Access the 2nd element of x\nx <- c(56, 95.3, 0.4)\nx[2]\n```\n\n---\n\nWe can change specific vector elements by combining indexing and assignment.\n\n</br>\n\n```{webr}\n#| exercise: ex_10\nx <- c(56, 95.3, 0.4)\nx[3] <- 0.5\nx\n```\n\n</br>\n\nOur next session will cover more on **vectors**, and the other major R data structures (**matrices**, **data.frames** and **lists**).\n\n## Data.frames combine vectors into tables\n\nA data.frame is a table (or two-dimensional array-like structure) where columns can contain different types of data (numeric, character, logical, etc.).\n\n</br>\n\nData.frames are ideal for managing and analyzing datasets with rows and columns.\n\n```{webr}\n#| exercise: ex_11\ndf <- data.frame(column1 = c(\"A\", \"B\", \"C\"), column2 = c(10, 200, 3))\ndf\n```\n\n## Indexing a data.frame\n\nWe can use numeric or logical index values for subseting a data.frame, similer to those we used for vectors.\n\n\n```{webr}\n#| exercise: ex_12\ndf <- data.frame(column1 = c(\"A\", \"B\", \"C\"), column2 = c(10, 200, 3))\ndf[1,]\ndf[1,2]\n```\n\nYou can also access specific columns via their column name: \n\n```{webr}\n#| exercise: ex_13\ndf <- data.frame(column1 = c(\"A\", \"B\", \"C\"), column2 = c(10, 200, 3))\ndf$column1\n```\n\n\n## Errors, warnings, and messages\n\nR will show red text in the console pane in three different situations:\n\n- **Errors**: When the red text is a legitimate error, it will be prefaced with \"Error in…\" and will try to explain what went wrong. Generally when there's an error, the code will not run.\n\n- **Warnings**: When the red text is a warning, it will be prefaced with \"Warning:' and R will try to explain why there's a warning. Generally your code will still work, but with some caveats. \n\n- **Messages**: When the red text doesn't start with either \"Error\" or \"Warning\", it's just a friendly message. You'll see these messages when you load R packages for example. \n\n\n\n## Key point: {.key-slide}\n\nR reports errors, warnings, and messages in a glaring red font, which makes it seem like it is scolding you. \n\n</br>\n**Don't panic**, it doesn't necessarily mean anything is wrong and indeed it is not always bad thing but you should read them to make sure. Over time we will learn more \"R speak\" and get more comfortable generally working in the console. Again Google and ChatGPT can help you interpert these messages.\n\n# End of Part 1\n\n## {background-image=\"images/title_slide.png\"}\n\n\n\n\n\n"},"formats":{"live-revealjs":{"identifier":{"display-name":"RevealJS","target-format":"live-revealjs","base-format":"revealjs","extension-name":"live"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","filters":["/Users/barry/Desktop/courses/r_intro/_extensions/r-wasm/live/live.lua"],"output-file":"r_intro.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.5.56","auto-stretch":true,"ojs-engine":true,"revealjs-plugins":[],"title":"R Language Basics","subtitle":"(Part 1)","author":"Barry Grant","institute":"UC San Diego","logo":"images/logo.png","webr":{"cell-options":{"fig-width":11,"fig-height":6,"max-lines":5,"autorun":false}},"theme":["simple","slides.scss"],"footer":"<http://thegrantlab.org/teaching/>"}}},"projectFormats":[]}